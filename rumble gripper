#include <PRIZM.h>    // TETRIX PRIZM Library
#include <TELEOP.h>   // TETRIX TeleOp module Library

PRIZM prizm;          // Create an instance within the PRIZM Library class named prizm
PS4 ps4;              // Create an instance within the PS4 Library class named ps4
int gripperClose = 110;
int gripperOpen = 58;
int PowerM1;
int PowerM2;
void setup() {

 Serial.begin(115200);      // Serial Monitor baud rate 
 prizm.PrizmBegin();        // Intializes the PRIZM controller and waits here for press of green start button

 ps4.setDeadZone(LEFT,10);    // set the Left Joystick dead zone range to +/- 10 
 ps4.setDeadZone(RIGHT,10);   // set the Right Joystick dead zone range to +/- 10 
 prizm.setMotorInvert (2,1);

}

 void loop() {

  ps4.getPS4();         // Get (read) all PS4 button and joystick data values
  if(ps4.Connected){
    PowerM1 = ps4.Motor (LY);
    PowerM2 = ps4.Motor (RY);
    prizm.setMotorPowers (PowerM1, PowerM2);
    if(ps4.Button (L1)) {
      moveGripper (gripperOpen);
    }
     if(ps4.Button (R1)) {
      moveGripper (gripperClose);
    }
    if (prizm.readSonicSensorCM(3) <=5 && prizm.readServoPosition (2)> 100) {
      ps4.setRumble(SLOW);
      ps4.setLED(RED);
      delay(1000);
      ps4.setRumble(STOP);
      ps4.setLED(OFF);
     
    }
    
    } else {
     prizm.setMotorPowers (0, 0);
    
  }

    
}
 void moveGripper(int angle) {
  delay(100);
  prizm.setServoPosition(2, angle);
 }
 
void Status(){
  Serial.print("PS4 Connection Status: ");
  Serial.println(ps4.Connected);         // returns PS4 connection status: 0 = disconnected; 1 = connected
  delay(100);                            // wait 100ms. Not necessary, only slows down the serial monitor print so it's readable
}

void Range(){
  Serial.print("PS4 in/out of range status: ");
  Serial.println(ps4.inRange);          // returns the PS4 in / out of range status: 0 = out of range; 1 = in range
  delay(100);                           // wait 100ms. Not necessary, only slows down the serial monitor print so it's readable
}

void TeleOpReset(){
  ps4.resetTeleOp();
  while(1);           // wait here in endless loop, or else we'd be resetting over and over again.
}

void TouchXY(){
  Serial.print("X coordinate: ");    
  Serial.println(ps4.Touchpad(TOUCHX));  // returns the X coordinate value of finger position on touch pad
  Serial.print("Y coordinate: "); 
  Serial.println(ps4.Touchpad(TOUCHY));  // returns the Y coordinate value of finger position on touch pad
  Serial.println(" ");
  delay(50);                            // wait 50ms. Not necessary, only slows down the serial monitor print so it's readable
}

void ControllerAngle(){
   Serial.print("Pitch: ");
   Serial.println(ps4.Angle(PITCH));    // returns the Pitch angle of the PS4 controller
   Serial.print("Roll: ");
   Serial.println(ps4.Angle(ROLL));     // returns the Roll angle of the PS4 controller
   Serial.println(" ");
   delay(50);                           // wait 50ms. Not necessary, only slows down the serial monitor print so it's readable
}

void Sticks(){
  Serial.print("Left X: ");
  Serial.println(ps4.Stick(LX));        // returns the raw value of the Left X axis joystick; Range = 0 - 255;
  Serial.print("Left Y: ");
  Serial.println(ps4.Stick(LY));        // returns the raw value of the Left Y axis joystick; Range = 0 - 255;
  Serial.println(" ");
  Serial.print("Right X: ");
  Serial.println(ps4.Stick(RX));        // returns the raw value of the Right X axis joystick; Range = 0 - 255;
  Serial.print("Right Y: ");
  Serial.println(ps4.Stick(RY));        // returns the raw value of the Right Y axis joystick; Range = 0 - 255;
  Serial.println(" ");
  delay(50);                            // wait 50ms. Not necessary, only slows down the serial monitor print so it's readable
}


void Buttons(){
  Serial.println(ps4.Button(TRIANGLE)); // returns the boolean value of a PS4 digital button, or analog value of the L2T and R2T buttons; (see list of button functions at the top of sketch)
  delay(50 );                           // wait 50ms. Not necessary, only slows down the serial monitor print so it's readable
  
}

void MoveMotor(){
  Serial.println(ps4.Motor(LY));        // returns the value of an analog trigger button or joystick mapped to a PRIZM motor power range of 0 - 100.
                                        // Analog Buttons/Joysticks/Gyro: (Joysticks - LX,LY,RX,RY); (Trigger Buttons - L2T,R2T); (Gyro - PITCH, ROLL)
  delay(50);                            // wait 50ms. Not necessary, only slows down the serial monitor print so it's readable                     
 }

void MoveServo(){
  Serial.println(ps4.Servo(RY));        // returns the value of an analog trigger button or joystick mapped to a PRIZM servo position range of 0 - 180.
                                        // Analog Buttons/Joysticks/Gyro: (Joysticks - LX,LY,RX,RY); (Trigger Buttons - L2T,R2T); (Gyro - PITCH, ROLL)
  delay(50);                            // wait 50ms. Not necessary, only slows down the serial monitor print so it's readable   
}

void Rumble(){
  ps4.setRumble(SLOW);                  // sets the PS4 controller rumble motor to slow vibrate
  delay(1000);                          // wait 1 second while running rumble motor

  ps4.setRumble(FAST);                  // sets the PS4 controller rumble motor to fast vibrate
  delay(1000);                          // wait 1 second while running rumble motor

  ps4.setRumble(STOP);                  // turns off (stops) the PS4 controller internal rumble motor
  delay(1000);                          // wait 1 second after turning off rumble motor
}


void LEDcolor(){
  ps4.setLED(RED);                      // set the PS4 LED color to RED
  delay(500);                           // wait a half second after turning LED on
  
  ps4.setLED(BLUE);                     // set the PS4 LED color to BLUE
  delay(500);                           // wait a half second after turning LED on
  
  ps4.setLED(YELLOW);                   // set the PS4 LED color to YELLOW
  delay(500);                           // wait a half second after turning LED on
 
  ps4.setLED(GREEN);                    // set the PS4 LED color to GREEN
  delay(500);                           // wait a half second after turning LED on
}

void buttonsGroup1(){
  Serial.print("Decimal: ");
  Serial.println(ps4.buttons_1);        // print the decimal number returned for button group 1 states
  Serial.print("Binary:  ");
  Serial.println(ps4.buttons_1,BIN);    // print the binary byte returned for button group 1 states
  Serial.println(" ");
  delay(50);                            // wait 50ms. Not necessary, only slows down the serial monitor print so it's readable
}

void buttonsGroup2(){
  Serial.print("Decimal: ");
  Serial.println(ps4.buttons_2);        // print the decimal number returned for button group 2 pressed states
  Serial.print("Binary:  ");
  Serial.println(ps4.buttons_2,BIN);    // print the binary byte returned for button group 2 pressed states
  Serial.println(" ");
  delay(50);                            // wait 50ms. Not necessary, only slows down the serial monitor print so it's readable
}
